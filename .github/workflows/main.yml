name: Deploy Node + React App to Staging or Production

on:
  push:
    branches:
      - main
      - react-staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          else
            echo "❌ No package.json found."
            exit 1
          fi

      - name: Build App
        run: |
          npm run build
          if [ -d dist ]; then
            echo "BUILD_DIR=dist" >> $GITHUB_ENV
          elif [ -d build ]; then
            echo "BUILD_DIR=build" >> $GITHUB_ENV
          else
            echo "❌ No build output folder found."
            exit 1
          fi

      - name: Set IP/USER/PORT/TARGET based on branch
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "DEPLOY_HOST=${{ secrets.PROD_SERVER_IP }}" >> $GITHUB_ENV
            echo "DEPLOY_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
            echo "DEPLOY_PORT=22" >> $GITHUB_ENV
            echo "TARGET_PATH=/opt/bitnami/wordpress/git-test" >> $GITHUB_ENV
            echo "USE_SUDO=true" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "react-staging" ]]; then
            echo "DEPLOY_HOST=${{ secrets.STAGING_SERVER_HOST }}" >> $GITHUB_ENV
            echo "DEPLOY_USER=${{ secrets.STAGING_SERVER_USER }}" >> $GITHUB_ENV
            echo "DEPLOY_PORT=65002" >> $GITHUB_ENV  # Hostinger port
            echo "TARGET_PATH=/home/u525216890/domains/occams.ai/public_html/git-test" >> $GITHUB_ENV
            echo "USE_SUDO=false" >> $GITHUB_ENV
          else
            echo "Invalid branch: $BRANCH"; exit 1
          fi

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p "$DEPLOY_PORT" -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts

      - name: Package build (tar.gz)
        run: |
          tar -czf build.tgz -C "$BUILD_DIR" .

      - name: Upload build
        run: |
          scp -P "$DEPLOY_PORT" -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no build.tgz "$DEPLOY_USER@$DEPLOY_HOST:/tmp/build.tgz"
      
      - name: Deploy remotely
        run: |
          ssh -p "$DEPLOY_PORT" -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no "$DEPLOY_USER@$DEPLOY_HOST" << EOF
            set -e
            TARGET_PATH="$TARGET_PATH"
            USE_SUDO="$USE_SUDO"
      
            if [ "\$USE_SUDO" = "true" ]; then SUDO="sudo"; else SUDO=""; fi
      
            mkdir -p "$TARGET_PATH"
            \$SUDO find "$TARGET_PATH" -mindepth 1 -maxdepth 1 -exec rm -rf {} +
            \$SUDO tar -xzf /tmp/build.tgz -C "$TARGET_PATH"
            rm -f /tmp/build.tgz
          EOF

