name: Deploy to Production or Staging

on:
  push:
    branches:
      - main
      - react-staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          else
            echo "No package.json found. Nothing to install."
            exit 1
          fi

      - name: Build App
        run: |
          npm run build
          if [ -d dist ]; then
            echo "BUILD_DIR=dist" >> $GITHUB_ENV
          elif [ -d build ]; then
            echo "BUILD_DIR=build" >> $GITHUB_ENV
          else
            echo "❌ No build directory found."
            exit 1
          fi

      - name: Set deployment IP and target path based on branch
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "DEPLOY_IP=${{ secrets.PROD_SERVER_IP }}" >> $GITHUB_ENV
            echo "TARGET_PATH=/opt/bitnami/wordpress/prod-build" >> $GITHUB_ENV
          elif [[ "${GITHUB_REF##*/}" == "react-staging" ]]; then
            echo "DEPLOY_IP=${{ secrets.STAGING_SERVER_IP }}" >> $GITHUB_ENV
            echo "TARGET_PATH=/opt/bitnami/wordpress/staging-build" >> $GITHUB_ENV
          else
            echo "Invalid branch for deployment"
            exit 1
          fi

      - name: Prepare SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DEPLOY_IP >> ~/.ssh/known_hosts

      - name: Package build output
        run: |
          tar -czf build.tgz -C "$BUILD_DIR" .

      - name: Upload build to $DEPLOY_IP
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no build.tgz ${{ secrets.SERVER_USER }}@$DEPLOY_IP:/tmp/build.tgz

      - name: Deploy to $TARGET_PATH
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@$DEPLOY_IP << EOF
            set -e
            sudo mkdir -p "$TARGET_PATH"
            sudo chown -R \$(whoami):\$(whoami) "$TARGET_PATH"
            rm -rf "$TARGET_PATH"/*
            tar -xzf /tmp/build.tgz -C "$TARGET_PATH"
            rm /tmp/build.tgz
          EOF
