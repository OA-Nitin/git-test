name: Deploy Node + React App to Staging or Production

on:
  push:
    branches:
      - main
      - react-staging

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          else
            echo "❌ No package.json found."
            exit 1
          fi

      - name: Build App
        run: |
          npm run build
          if [ -d dist ]; then
            echo "BUILD_DIR=dist" >> $GITHUB_ENV
          elif [ -d build ]; then
            echo "BUILD_DIR=build" >> $GITHUB_ENV
          else
            echo "❌ No build output folder found."
            exit 1
          fi

      - name: Set IP, User, and Target Path Based on Branch
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == "main" ]]; then
            echo "DEPLOY_IP=${{ secrets.PROD_SERVER_IP }}" >> $GITHUB_ENV
            echo "DEPLOY_USER=${{ secrets.SERVER_USER }}" >> $GITHUB_ENV
            echo "TARGET_PATH=/opt/bitnami/wordpress/git-test" >> $GITHUB_ENV
          elif [[ "$BRANCH" == "react-staging" ]]; then
            echo "DEPLOY_IP=${{ secrets.STAGING_SERVER_IP }}" >> $GITHUB_ENV
            echo "DEPLOY_USER=${{ secrets.STAGING_SERVER_USER }}" >> $GITHUB_ENV
            echo "TARGET_PATH=/home/u525216890/domains/occams.ai/public_html/git-test" >> $GITHUB_ENV
          else
            echo "Invalid branch: $BRANCH"
            exit 1
          fi

      - name: Setup SSH Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DEPLOY_IP >> ~/.ssh/known_hosts

      - name: Package Build Output
        run: |
          tar -czf build.tgz -C "$BUILD_DIR" .

      - name: Upload Build to Server
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no build.tgz $DEPLOY_USER@$DEPLOY_IP:/tmp/build.tgz

      - name: Deploy on Server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEPLOY_USER@$DEPLOY_IP << EOF
            set -e
            sudo mkdir -p "$TARGET_PATH"
            sudo chown -R \$(whoami):\$(whoami) "$TARGET_PATH"
            rm -rf "$TARGET_PATH"/*
            tar -xzf /tmp/build.tgz -C "$TARGET_PATH"
            rm /tmp/build.tgz
          EOF
